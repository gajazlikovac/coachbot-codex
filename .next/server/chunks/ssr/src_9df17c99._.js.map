{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/instructionsActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { z } from 'zod';\n\nimport { AssistantState } from '@/app/(main)/instructions/_components/SystemInstructions';\nimport { State } from '@/lib/models/common.models';\nimport { ModerationRule, ModerationTemplate, Stage, Style } from '@/lib/models/instruction.models';\nimport {\n  categorySchema,\n  defaultModerationRule,\n  defaultStyleData,\n  instructionSchema,\n  mapModerationRule,\n  mapPrismaModerationData,\n  mapStyleData,\n  moderationRuleSchema,\n  nameSchema,\n  stageSchema,\n  styleSchema,\n} from '@/lib/utils/db.utils';\nimport {\n  createAssistantModerationRule,\n  createAssistantModerationTemplate,\n  createAssistantStage,\n  createAssistantStyle,\n  deleteAssistantModerationRule,\n  deleteAssistantModerationTemplate,\n  deleteAssistantStage,\n  deleteAssistantStyle,\n  getAssistantFirstStage,\n  getAssistantModerationRules,\n  getAssistantStages,\n  getAssistantStyles,\n  updateAssistantModerationRule,\n  updateAssistantModerationTemplate,\n  updateAssistantStage,\n  updateAssistantStagesOrder,\n  updateAssistantStyle,\n  updateConfigurationInstructions,\n} from '../db/configurationClient';\nimport { getAssistantConfiguration, getCurrentAssistant } from './assistantActions';\n\nasync function validateAndUpdateItem<S, T extends { id: S }>(\n  data: T,\n  schema: z.ZodSchema<Partial<T>>,\n  updateFunction: (assistantId: string, id: S, data: Partial<T>) => Promise<any>,\n  successMessage: string,\n  tag?: string\n): Promise<State<T>> {\n  let assistantId;\n  try {\n    assistantId = await getCurrentAssistant();\n\n    if (!assistantId) {\n      console.warn('Assistant not found or user not authenticated');\n      return { error: 'General.errors.noAssistantExist', value: null };\n    }\n\n    const parsedData = schema.safeParse(data);\n\n    if (!parsedData.success) {\n      return { errors: parsedData.error.errors.map(({ message, path }) => ({ name: path.join('.'), message })) };\n    }\n\n    const value = await updateFunction(assistantId, data.id, parsedData.data);\n\n    tag && revalidateTag(tag);\n    return { successMessage, value };\n  } catch (error) {\n    console.error(`[instructionsActions] Error during updating '${data.id}' ${tag} item : `, error);\n    return { error: 'Instructions.systemInstruction.errors.saveFailed', value: data };\n  }\n}\n\nasync function createItem<T>(\n  data: T,\n  createFunction: (assistantId: string, data: T) => Promise<T>,\n  successMessage: string,\n  tags: string[] = []\n): Promise<State<T>> {\n  let assistantConfigId;\n  try {\n    const assistantConfig = await getAssistantConfiguration();\n    assistantConfigId = assistantConfig?.id;\n\n    if (!assistantConfigId) {\n      console.warn('Assistant not found or user not authenticated');\n      return { error: 'General.errors.noAssistantExist', value: null };\n    }\n\n    const createdItem: any = await createFunction(assistantConfigId, data as T);\n    tags.forEach(revalidateTag);\n\n    return { successMessage, value: createdItem };\n  } catch (error) {\n    console.error(`[instructionsActions] Error during creating ${tags?.[0]} item`, error);\n    return { error: 'Instructions.systemInstruction.errors.saveFailed' };\n  }\n}\n\nasync function getItems<T>(getFunction: (assistantId: string) => Promise<T>, tag?: string, id?: string): Promise<T> {\n  let assistantId;\n  try {\n    assistantId = id || (await getCurrentAssistant());\n    if (!assistantId) {\n      console.warn('Assistant not found or user not authenticated');\n      return [] as T;\n    }\n\n    return getFunction(assistantId);\n  } catch (error) {\n    console.error(`[instructionsActions] Error during getting assistant '${assistantId}'  ${tag} data`, error);\n    return [] as T;\n  }\n}\n\nasync function deleteItem<T>(\n  id: T,\n  deleteFunction: (id: T) => Promise<any>,\n  successMessage: string,\n  tags: string[] = []\n): Promise<State<null>> {\n  try {\n    await deleteFunction(id);\n    tags.forEach(revalidateTag);\n\n    return { successMessage, value: null };\n  } catch (error) {\n    console.error(`[instructionsActions] Error during deleting '${id}'  ${tags[0]} data.`, error);\n    return { error: 'Instructions.systemInstruction.errors.saveFailed' };\n  }\n}\n\n// MAIN INSTRUCTIONS\nexport async function updateConfigInstructions(formData: any): Promise<State<AssistantState>> {\n  let assistantId;\n  try {\n    assistantId = (await getCurrentAssistant()) || '';\n    const formInstructions = formData?.get('instructions');\n    const formOnboarding = formData?.get('onboarding');\n    const validatedData = formInstructions && instructionSchema.parse({ instructions: formInstructions });\n\n    if (validatedData instanceof Error) {\n      return { error: validatedData.message };\n    }\n\n    const { instructions, onboarding } = await updateConfigurationInstructions(assistantId, {\n      instructions: !!formInstructions ? formInstructions : undefined,\n      onboarding: !!formOnboarding ? formOnboarding : undefined,\n    });\n    return { successMessage: 'Instructions.systemInstruction.successMessages', value: { instructions, onboarding } };\n  } catch (error) {\n    console.error(`[instructionsClient] Error updating assistant ${assistantId} instructions:`, error);\n\n    return { error: 'Instructions.systemInstruction.errors.saveFailed' };\n  }\n}\n\n// STYLES\nexport async function getStyles(): Promise<Style[]> {\n  const styles = (await getItems(getAssistantStyles, 'styles')) || [];\n\n  return styles.map(mapStyleData);\n}\n\nexport async function updateStyle(style: Style): Promise<State<Style | null>> {\n  const styleData = {\n    ...style,\n    greeting_templates: JSON.stringify(style.greeting_templates.split('\\n')),\n    response_patterns: JSON.stringify(style.response_patterns.split('\\n')),\n    closing_templates: JSON.stringify(style.closing_templates.split('\\n')),\n  };\n\n  const result = await validateAndUpdateItem<number, Style>(\n    styleData,\n    styleSchema,\n    updateAssistantStyle,\n    'Instructions.Styles.successMessage',\n    'styles'\n  );\n\n  return { ...result, value: result.value ? mapStyleData(result.value) : result.value };\n}\n\nexport async function updateStyleTitle(id: number, title: string): Promise<State<Style | null>> {\n  let assistantId;\n  try {\n    assistantId = (await getCurrentAssistant()) || '';\n    const value: any = await updateAssistantStyle(assistantId || '', id, { ...defaultStyleData, title, assistantId });\n\n    return { successMessage: 'General.successMessages.dataSaved', value: mapStyleData(value) };\n  } catch (error) {\n    console.error(`[instructionsClient] Error updating style ${id} title:`, error);\n\n    return { error: 'General.errors.unexpectedError', value: null };\n  }\n}\n\nexport async function createStyle(title: string): Promise<State<Style | null>> {\n  return createItem<any>({ ...defaultStyleData, title }, createAssistantStyle, 'General.successMessages.dataSaved', [\n    'styles',\n  ]);\n}\n\nexport async function deleteStyle(id: number): Promise<State<null>> {\n  return deleteItem(id, deleteAssistantStyle, 'General.successMessages.dataDeleted', ['styles']);\n}\n\n// STAGES\nexport async function getStages(id?: string): Promise<Stage[]> {\n  return getItems<Stage[]>(getAssistantStages, 'stages', id);\n}\n\nexport async function getFirstStage(): Promise<Stage | null> {\n  return getItems<Stage | null>(getAssistantFirstStage, 'first stage');\n}\n\nexport async function updateStage(stage: Stage, onlyName?: boolean): Promise<State<Stage>> {\n  return validateAndUpdateItem<string, Stage>(\n    stage,\n    onlyName ? nameSchema : stageSchema,\n    updateAssistantStage,\n    'Instructions.systemInstruction.successMessages',\n    'stages'\n  );\n}\nexport async function updateStageOrder(targetStage: Stage, changedOrder: number, stages: Stage[]): Promise<Stage[]> {\n  let assistantId;\n  try {\n    assistantId = await getCurrentAssistant();\n    if (!assistantId) {\n      console.warn('Assistant not found or user not authenticated');\n      return [];\n    }\n\n    const newOrder = targetStage.order + changedOrder;\n\n    const updatedStages = stages.map((stage: Stage) => {\n      if (stage.id === targetStage.id) {\n        return { ...targetStage, order: newOrder };\n      }\n\n      if (stage.order === newOrder) {\n        return { ...stage, order: stage.order - changedOrder || stage.order + changedOrder };\n      }\n\n      return stage;\n    });\n\n    await updateAssistantStagesOrder(assistantId, updatedStages);\n    ['stages', 'firstStage'].forEach(revalidateTag);\n\n    return updatedStages.sort((a, b) => a.order - b.order);\n  } catch (error) {\n    console.error(`[instructionsClient] Error updating assistant ${assistantId} stages order:`, error);\n\n    return [];\n  }\n}\n\nexport async function createStage(name: string): Promise<State<Stage | null>> {\n  return createItem<Stage>({ name } as Stage, createAssistantStage, 'General.successMessages.dataSaved', [\n    'stages',\n    'firstStage',\n  ]);\n}\n\nexport async function deleteStage(id: string): Promise<State<null>> {\n  return deleteItem(id, deleteAssistantStage, 'General.successMessages.dataDeleted', ['stages', 'firstStage']);\n}\n\n// MODERATION RULES & TEMPLATES\nexport async function getModerationRules(): Promise<ModerationRule[]> {\n  const rules = await getItems(getAssistantModerationRules, 'moderation rules');\n\n  return rules.map((rule) => mapPrismaModerationData(rule));\n}\n\nexport async function createModerationRule(name: string): Promise<State<ModerationRule | null>> {\n  const state = await createItem<any>(\n    { ...defaultModerationRule, name },\n    createAssistantModerationRule,\n    'General.successMessages.dataSaved',\n    ['moderationRules']\n  );\n\n  return { ...state, value: mapPrismaModerationData(state.value) };\n}\n\nexport async function updateModerationRule(\n  rule: ModerationRule,\n  onlyName: boolean = false,\n  selectedTemplates: ModerationTemplate[] = []\n): Promise<State<ModerationRule | null>> {\n  const state = await validateAndUpdateItem<string, ModerationRule>(\n    mapModerationRule(rule, selectedTemplates),\n    onlyName ? nameSchema : moderationRuleSchema,\n    updateAssistantModerationRule,\n    'General.successMessages.dataSaved',\n    'moderationRules'\n  );\n\n  return {\n    ...state,\n    value: state.value ? mapPrismaModerationData(state.value as any, selectedTemplates) : state.value,\n  };\n}\n\nexport async function deleteModerationRule(id: string): Promise<State<ModerationRule | null>> {\n  return deleteItem(id, deleteAssistantModerationRule, 'General.successMessages.dataDeleted', ['moderationRules']);\n}\n\nexport async function createModerationTemplate(\n  category: string,\n  rule_id?: string\n): Promise<State<ModerationTemplate | null>> {\n  if (!rule_id) return { error: 'Instructions.ModerationRules.settings.noRuleSelectedError', value: null };\n\n  const template = await createItem<ModerationTemplate>(\n    { rule_id, category, response_template: '' } as ModerationTemplate,\n    createAssistantModerationTemplate,\n    'General.successMessages.dataSaved'\n  );\n\n  return template;\n}\n\nexport async function updateModerationTemplate(\n  template: ModerationTemplate\n): Promise<State<ModerationTemplate | null>> {\n  const state = await validateAndUpdateItem<string, ModerationTemplate>(\n    template,\n    categorySchema,\n    updateAssistantModerationTemplate,\n    'General.successMessages.dataSaved'\n  );\n\n  return state;\n}\n\nexport async function deleteModerationTemplate(id: string): Promise<State<ModerationTemplate | null>> {\n  return deleteItem(id, deleteAssistantModerationTemplate, 'General.successMessages.dataDeleted');\n}\n"],"names":[],"mappings":";;;;;;IAuIsB,2BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/shared/InstructionInput.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { twMerge } from 'tailwind-merge';\n\nimport { Button } from './Button';\nimport Tooltip from './Tooltip';\n\ninterface InstructionInputProps {\n  id: string;\n  name: string;\n  className?: string;\n  labelKey?: string;\n  tooltipKey?: string;\n  initialValue?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  required?: boolean;\n  topControls?: boolean;\n  bottomControls?: boolean;\n  showSaveOnChanges?: boolean;\n  showSave?: boolean;\n  onBlur?: (value: string) => void;\n  register?: any;\n  errors?: any;\n}\n\nexport default function InstructionInput({\n  id,\n  name,\n  labelKey,\n  tooltipKey,\n  className,\n  disabled,\n  isLoading,\n  initialValue,\n  topControls = true,\n  bottomControls = true,\n  showSaveOnChanges = true,\n  showSave = true,\n  register,\n  required,\n  errors,\n  onBlur,\n}: InstructionInputProps) {\n  const t = useTranslations();\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    setValue(initialValue || '');\n  }, [initialValue]);\n\n  const isSaveVisible = useMemo(() => {\n    return showSaveOnChanges ? initialValue !== value : showSave;\n  }, [showSave, showSaveOnChanges, initialValue, value]);\n\n  const inputProps = useMemo(() => {\n    if (!register) {\n      return { required, value, onChange: (e: any) => setValue(e.target.value), onBlur: () => onBlur && onBlur(value) };\n    }\n\n    const registerProps = register(name, { required });\n\n    return {\n      ...registerProps,\n      onChange: async (e: any) => {\n        setValue(e.target.value);\n        await registerProps.onChange(e);\n      },\n      onBlur: async (e: any) => {\n        onBlur && onBlur(value);\n        await registerProps.onBlur(e);\n      },\n    };\n  }, [register, onBlur, value]);\n\n  return (\n    <div className={twMerge('relative flex flex-col gap-y-2.5', className)}>\n      <div className=\"flex items-center justify-between ps-5\">\n        <label htmlFor={id} className=\"inline-flex items-center gap-x-2 text-sm text-storm-gray\">\n          {labelKey && t(labelKey)}\n          {tooltipKey && <Tooltip iconClass=\"cbi-message-question\" tooltipLabel={tooltipKey} />}\n        </label>\n        {topControls && (\n          <div className=\"flex gap-x-1\">\n            {/* TODO: uncomment when logic will be omplemented\n            <Button variant=\"solid\" color=\"primary\" className=\"py-1.5\" disabled>\n              <i className=\"cbi-refresh\" />\n              {t('General.Instruction.refreshButton')}\n            </Button> */}\n            {/* <Button variant=\"outline\" color=\"darkGray\" className=\"py-1.5\">\n              {t('General.Instruction.userUpdatesButton')}\n            </Button> */}\n          </div>\n        )}\n      </div>\n\n      <div\n        className={twMerge(\n          'relative flex flex-grow flex-col justify-between gap-y-3 rounded-lg border border-light-gray bg-white/[18%] p-1 pt-2',\n          (disabled || isLoading) && 'border-light-gray/80 bg-white/[6%]'\n        )}\n      >\n        <textarea\n          id={id}\n          name={name}\n          className={twMerge(\n            'focus:no-outline mx-1.5 flex flex-grow resize-none overflow-y-auto bg-transparent pb-20 pe-3 pt-4 text-base text-main focus:ring-0',\n            isLoading && 'pointer-events-none animate-pulse',\n            disabled && 'pointer-events-none opacity-10'\n          )}\n          {...inputProps}\n        />\n\n        {bottomControls && (\n          <div className=\"absolute bottom-1 right-1 flex gap-x-1\">\n            {/* TODO: Revert back button once the reset functionality is available */}\n            {/* <Button variant=\"solid\" color=\"dark\" className={disabled ? 'pointer-events-none animate-pulse' : ''}>\n              <i className=\"cbi-undo\" />\n              {t('General.Instruction.resetButton')}\n            </Button> */}\n            {isSaveVisible && (\n              <Button\n                name={`${name}-submit`}\n                type=\"submit\"\n                variant=\"solid\"\n                color=\"light\"\n                className={`${isLoading && 'pointer-events-none animate-pulse'}`}\n              >\n                <i className=\"cbi-archive-tick\" />\n                {t('General.Instruction.saveButton')}\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n      {errors && errors[name] && t.has(errors[name].message) && (\n        <p className=\"text-sm text-salmon\">{t(errors[name].message)}</p>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AACA;AAPA;;;;;;;AA4Be,SAAS,iBAAiB,EACvC,EAAE,EACF,IAAI,EACJ,QAAQ,EACR,UAAU,EACV,SAAS,EACT,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,cAAc,IAAI,EAClB,iBAAiB,IAAI,EACrB,oBAAoB,IAAI,EACxB,WAAW,IAAI,EACf,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACgB;IACtB,MAAM,IAAI,CAAA,GAAA,sMAAA,CAAA,kBAAe,AAAD;IACxB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,SAAS,gBAAgB;IAC3B,GAAG;QAAC;KAAa;IAEjB,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC5B,OAAO,oBAAoB,iBAAiB,QAAQ;IACtD,GAAG;QAAC;QAAU;QAAmB;QAAc;KAAM;IAErD,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACzB,IAAI,CAAC,UAAU;YACb,OAAO;gBAAE;gBAAU;gBAAO,UAAU,CAAC,IAAW,SAAS,EAAE,MAAM,CAAC,KAAK;gBAAG,QAAQ,IAAM,UAAU,OAAO;YAAO;QAClH;QAEA,MAAM,gBAAgB,SAAS,MAAM;YAAE;QAAS;QAEhD,OAAO;YACL,GAAG,aAAa;YAChB,UAAU,OAAO;gBACf,SAAS,EAAE,MAAM,CAAC,KAAK;gBACvB,MAAM,cAAc,QAAQ,CAAC;YAC/B;YACA,QAAQ,OAAO;gBACb,UAAU,OAAO;gBACjB,MAAM,cAAc,MAAM,CAAC;YAC7B;QACF;IACF,GAAG;QAAC;QAAU;QAAQ;KAAM;IAE5B,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,oCAAoC;;0BAC1D,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,SAAS;wBAAI,WAAU;;4BAC3B,YAAY,EAAE;4BACd,4BAAc,8OAAC,yHAAA,CAAA,UAAO;gCAAC,WAAU;gCAAuB,cAAc;;;;;;;;;;;;oBAExE,6BACC,8OAAC;wBAAI,WAAU;;;;;;;;;;;;0BAanB,8OAAC;gBACC,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EACf,wHACA,CAAC,YAAY,SAAS,KAAK;;kCAG7B,8OAAC;wBACC,IAAI;wBACJ,MAAM;wBACN,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EACf,sIACA,aAAa,qCACb,YAAY;wBAEb,GAAG,UAAU;;;;;;oBAGf,gCACC,8OAAC;wBAAI,WAAU;kCAMZ,+BACC,8OAAC,wHAAA,CAAA,SAAM;4BACL,MAAM,GAAG,KAAK,OAAO,CAAC;4BACtB,MAAK;4BACL,SAAQ;4BACR,OAAM;4BACN,WAAW,GAAG,aAAa,qCAAqC;;8CAEhE,8OAAC;oCAAE,WAAU;;;;;;gCACZ,EAAE;;;;;;;;;;;;;;;;;;YAMZ,UAAU,MAAM,CAAC,KAAK,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,mBACnD,8OAAC;gBAAE,WAAU;0BAAuB,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO;;;;;;;;;;;;AAIlE","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/app/%28main%29/instructions/_components/SystemInstructions.tsx"],"sourcesContent":["'use client';\n\nimport { use, useActionState, useCallback, useEffect, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { twMerge } from 'tailwind-merge';\n\nimport { useRootContext } from '@/contexts/RootContextProvider';\nimport { HeapTrackEvent } from '@/lib/models/analytic.models';\nimport { AssistantConfiguration } from '@/lib/models/assistant.models';\nimport { State } from '@/lib/models/common.models';\nimport { heapAnalytics } from '@/lib/services/HeapAnalytics';\nimport { updateConfigInstructions } from '@/server/actions/instructionsActions';\nimport CollapsiblePanel from '@/shared/CollapsiblePanel';\nimport InstructionInput from '@/shared/InstructionInput';\n\ninterface SystemInstructionsProps {\n  className?: string;\n  assistantConfig$: Promise<AssistantConfiguration | null>;\n}\n\nexport interface AssistantState {\n  instructions: string | null;\n  onboarding?: string | null;\n}\n\nexport default function SystemInstructions({ className, assistantConfig$ }: SystemInstructionsProps) {\n  const t = useTranslations();\n  const { instructions = '', onboarding = '' } = use(assistantConfig$) || ({} as AssistantConfiguration);\n  const [initialValue, setInitialValue] = useState<AssistantState>({ instructions, onboarding });\n  const { selectedAssistant } = useRootContext();\n\n  const handleSave = useCallback(async (formData: FormData) => {\n    heapAnalytics.trackEvent(HeapTrackEvent.save_main_instruction);\n    const result = await updateConfigInstructions(formData);\n    result.value && setInitialValue(result.value);\n\n    return result;\n  }, []);\n\n  const handleAutoSave = useCallback(async (value: string, key: string) => {\n    const formData = new FormData();\n    formData.append(key, value);\n\n    await handleSave(formData);\n  }, []);\n\n  const [state, saveAction, isPending] = useActionState<State<AssistantState>, any>(\n    async (_: State<AssistantState>, formData: FormData) => handleSave(formData),\n    { value: initialValue }\n  );\n\n  useEffect(() => setInitialValue({ instructions, onboarding }), [instructions, onboarding]);\n\n  return (\n    <div className={twMerge('flex flex-grow flex-col', className)}>\n      <form action={saveAction} className=\"flex flex-grow flex-col gap-y-5\">\n        <CollapsiblePanel\n          title={t('Instructions.systemInstruction.label')}\n          subTitle={t('Instructions.systemInstruction.tooltip')}\n          toggleText={true}\n          toggleClass=\"bg-white/[50%] border border-white/[6%] rounded-xl p-3 rotate-0 group-data-[open]:rotate-180\"\n          className=\"border-0 bg-light-gray/[18%] py-4 ps-5 text-sm text-light-gray data-[open]:bg-white/[8%] data-[open]:text-main\"\n          titleClass=\"uppercase font-bold\"\n          contentClassName=\"border-0 bg-white/[8%] p-3 data-[open]:pt-0\"\n        >\n          <InstructionInput\n            disabled={!selectedAssistant?.id}\n            name=\"instructions\"\n            isLoading={isPending}\n            className={'min-h-[45svh] shrink-0 flex-grow'}\n            id=\"system-instructions-input\"\n            initialValue={initialValue.instructions || ''}\n            onBlur={(value: string) => handleAutoSave(value, 'instructions')}\n          />\n        </CollapsiblePanel>\n        <CollapsiblePanel\n          title={t('Instructions.onboardingInstruction.label')}\n          subTitle={t('Instructions.onboardingInstruction.tooltip')}\n          toggleText={true}\n          toggleClass=\"bg-white/[50%] border border-white/[6%] rounded-xl p-3 rotate-0 group-data-[open]:rotate-180\"\n          className=\"border-0 bg-light-gray/[18%] py-4 ps-5 text-sm text-light-gray data-[open]:bg-white/[8%] data-[open]:text-main\"\n          titleClass=\"uppercase font-bold\"\n          contentClassName=\"border-0 bg-white/[8%] p-3 data-[open]:pt-0\"\n        >\n          <InstructionInput\n            disabled={!selectedAssistant?.id}\n            name=\"onboarding\"\n            isLoading={isPending}\n            className={'min-h-[45svh] shrink-0 flex-grow'}\n            id=\"onboarding-instructions-input\"\n            initialValue={initialValue.onboarding || ''}\n            onBlur={(value: string) => handleAutoSave(value, 'onboarding')}\n          />\n        </CollapsiblePanel>\n      </form>\n\n      {state?.error && <p className=\"mt-2 text-sm text-salmon\">{t(state.error)}</p>}\n      {state?.successMessage && <p className=\"mt-2 text-green-600\">{t(state.successMessage)}</p>}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAbA;;;;;;;;;;;AAyBe,SAAS,mBAAmB,EAAE,SAAS,EAAE,gBAAgB,EAA2B;IACjG,MAAM,IAAI,CAAA,GAAA,sMAAA,CAAA,kBAAe,AAAD;IACxB,MAAM,EAAE,eAAe,EAAE,EAAE,aAAa,EAAE,EAAE,GAAG,CAAA,GAAA,qMAAA,CAAA,MAAG,AAAD,EAAE,qBAAsB,CAAC;IAC1E,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;QAAE;QAAc;IAAW;IAC5F,MAAM,EAAE,iBAAiB,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD;IAE3C,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACpC,uIAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,0IAAA,CAAA,iBAAc,CAAC,qBAAqB;QAC7D,MAAM,SAAS,MAAM,CAAA,GAAA,gKAAA,CAAA,2BAAwB,AAAD,EAAE;QAC9C,OAAO,KAAK,IAAI,gBAAgB,OAAO,KAAK;QAE5C,OAAO;IACT,GAAG,EAAE;IAEL,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO,OAAe;QACvD,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC,KAAK;QAErB,MAAM,WAAW;IACnB,GAAG,EAAE;IAEL,MAAM,CAAC,OAAO,YAAY,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAClD,OAAO,GAA0B,WAAuB,WAAW,WACnE;QAAE,OAAO;IAAa;IAGxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE,IAAM,gBAAgB;YAAE;YAAc;QAAW,IAAI;QAAC;QAAc;KAAW;IAEzF,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,2BAA2B;;0BACjD,8OAAC;gBAAK,QAAQ;gBAAY,WAAU;;kCAClC,8OAAC,kIAAA,CAAA,UAAgB;wBACf,OAAO,EAAE;wBACT,UAAU,EAAE;wBACZ,YAAY;wBACZ,aAAY;wBACZ,WAAU;wBACV,YAAW;wBACX,kBAAiB;kCAEjB,cAAA,8OAAC,kIAAA,CAAA,UAAgB;4BACf,UAAU,CAAC,mBAAmB;4BAC9B,MAAK;4BACL,WAAW;4BACX,WAAW;4BACX,IAAG;4BACH,cAAc,aAAa,YAAY,IAAI;4BAC3C,QAAQ,CAAC,QAAkB,eAAe,OAAO;;;;;;;;;;;kCAGrD,8OAAC,kIAAA,CAAA,UAAgB;wBACf,OAAO,EAAE;wBACT,UAAU,EAAE;wBACZ,YAAY;wBACZ,aAAY;wBACZ,WAAU;wBACV,YAAW;wBACX,kBAAiB;kCAEjB,cAAA,8OAAC,kIAAA,CAAA,UAAgB;4BACf,UAAU,CAAC,mBAAmB;4BAC9B,MAAK;4BACL,WAAW;4BACX,WAAW;4BACX,IAAG;4BACH,cAAc,aAAa,UAAU,IAAI;4BACzC,QAAQ,CAAC,QAAkB,eAAe,OAAO;;;;;;;;;;;;;;;;;YAKtD,OAAO,uBAAS,8OAAC;gBAAE,WAAU;0BAA4B,EAAE,MAAM,KAAK;;;;;;YACtE,OAAO,gCAAkB,8OAAC;gBAAE,WAAU;0BAAuB,EAAE,MAAM,cAAc;;;;;;;;;;;;AAG1F","debugId":null}}]
}