{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/lib/models/common.models.ts"],"sourcesContent":["import { Assistant } from './assistant.models';\nimport { Subscription } from './checkout.models';\nimport { ModerationRule, Stage, Style } from './instruction.models';\n\nexport interface ModelConfig {\n  id: number;\n  temperature: number;\n  top_p: number;\n  frequency_penalty: number;\n  presence_penalty: number;\n  created_at: Date | null;\n  assistantId?: string | null;\n}\n\nexport interface Template {\n  id: string;\n  name: string;\n  instructions: string | null;\n  onboarding: string | null;\n  onboardingAnalyzer: string | null;\n  modelConfigs?: ModelConfig[];\n  moderationRules?: ModerationRule[];\n  stages?: Stage[];\n  styles?: Style[];\n}\n\nexport enum Period {\n  allTime = 'all time',\n  last7Days = '7',\n  last30Days = '30',\n}\n\nexport enum FileStatus {\n  error = 'error',\n  processing = 'processing',\n  complete = 'complete',\n}\n\nexport enum FileType {\n  knowledge = 'knowledge',\n  reference = 'reference',\n}\n\nexport interface KnowledgeFile {\n  id: string;\n  name: string;\n  location: string | null;\n  status: FileStatus | string;\n  uploaded_at: Date;\n  user_id: string;\n  file?: any;\n  checked?: boolean;\n  fileType: FileType | string;\n}\n\nexport interface User {\n  id: string;\n  name: string | null;\n  email: string;\n  emailVerified: boolean | null;\n  accessAllowed?: boolean | null;\n  onboardingPassed?: boolean | null;\n  Chat?: any[];\n  assistants?: Assistant[];\n  KnowledgeFile?: KnowledgeFile[];\n  subscription?: Subscription;\n}\n\nexport enum Level {\n  low = 'low',\n  medium = 'medium',\n  high = 'high',\n}\n\nexport type UpdateResult = {\n  success: boolean;\n  error?: string;\n};\n\nexport interface State<T> {\n  value?: T | null;\n  error?: string | null;\n  errors?: { name: string | number; message: string }[];\n  successMessage?: string | null;\n}\n\nexport interface SessionDetails {\n  details?: SessionDetailsTab[];\n  context?: SessionDetailsTab[];\n  progress?: SessionDetailsTab[];\n}\n\nexport interface SessionDetailsTab {\n  name: string;\n  descriptions: ({ type: 'text'; value: string; title?: string } | { type: 'list'; value: string[]; title?: string })[];\n}\n"],"names":[],"mappings":";;;;;;AA0BO,IAAA,AAAK,gCAAA;;;;WAAA;;AAML,IAAA,AAAK,oCAAA;;;;WAAA;;AAML,IAAA,AAAK,kCAAA;;;WAAA;;AA8BL,IAAA,AAAK,+BAAA;;;;WAAA","debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/filesActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter from '@/lib/eventEmitter';\nimport { FileStatus, KnowledgeFile } from '@/lib/models/common.models';\nimport { deleteGcpStorageFile, getGcpStorageSignedUrl, getSignedUrlForUpload } from '../db/gcpClient';\nimport { deleteUserFile, editUserFile, getUserFiles, uploadUserFiles } from '../db/userClient';\nimport { getSessionUser } from './sessionActions';\n\nexport const uploadFileToGCP = async (userId: string, file: File, name: string): Promise<string | null> => {\n  try {\n    const formData = new FormData();\n    const fileName = `${userId}/${name}`;\n    const { url, fields } = await getSignedUrlForUpload(fileName, file.type, process.env.GCP_KB_BUCKET_NAME || '');\n\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value as any);\n    });\n\n    const response = await fetch(url, { method: 'POST', body: formData });\n\n    if (!response.ok) {\n      console.error(`Failed to upload file: ${response.status} ${response.statusText}`);\n    }\n\n    return `${process.env.GCP_KB_BUCKET_NAME || ''}/${fileName}`;\n  } catch (error) {\n    console.error(`[fileActions] Error uploading user ${userId} file \"${file.name}\":`, error);\n    return null;\n  }\n};\n\nexport async function getFiles(): Promise<KnowledgeFile[]> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    return getUserFiles(userId || '');\n  } catch (error) {\n    console.error(`[filesActions] Error fetching user ${userId} files`, error);\n\n    return [];\n  }\n}\n\nexport async function uploadFile({ id, content }: { id: string; content: File }): Promise<string | null> {\n  let user_id: string | undefined;\n  try {\n    user_id = (await getSessionUser()) || '';\n\n    if (!user_id) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const fileId = uuidv4();\n    const location = await uploadFileToGCP(user_id || '', content, fileId);\n    const uploadedFile = await uploadUserFiles({\n      id: fileId,\n      name: content.name,\n      status: FileStatus.processing,\n      location,\n      user_id,\n    });\n\n    eventEmitter.emit(`message:${user_id}`, { user_id, event: 'fileUploaded', data: uploadedFile });\n    return id;\n  } catch (error) {\n    console.error(`[filesActions] Error updating account data for user ${user_id}`, error);\n\n    return null;\n  }\n}\n\nexport async function revalidateFilesTag() {\n  revalidateTag('files');\n}\n\nexport async function editFile(\n  id: string,\n  data: Partial<KnowledgeFile>,\n  user_id?: string\n): Promise<KnowledgeFile | null> {\n  let userId;\n  try {\n    userId = user_id || (await getSessionUser());\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const editedFile = await editUserFile(userId, id, data);\n    revalidateTag('files');\n\n    return editedFile;\n  } catch (error) {\n    console.error(`[filesActions] Error updating user ${userId} file ${id}`, error);\n    return null;\n  }\n}\n\nexport async function deleteFile(file: KnowledgeFile): Promise<void> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      return console.error('[filesActions] User not authenticated');\n    }\n\n    if (!file.location) {\n      return console.error('[filesActions] File name or bucket is not set!');\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    await deleteGcpStorageFile(process.env.GCP_KB_BUCKET_NAME || '', filename);\n    await deleteUserFile(userId, file.id);\n    revalidateTag('files');\n  } catch (error) {\n    console.error(`[filesActions] Error deleting user ${userId} file ${file.id}`, error);\n  }\n}\n\nexport async function getFileLink(file: KnowledgeFile): Promise<string | null> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    if (!file.location || !process.env.GCP_KB_BUCKET_NAME) {\n      console.error('[filesActions] File name or bucket is not set!');\n      return null;\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    return getGcpStorageSignedUrl(filename, process.env.GCP_KB_BUCKET_NAME || '', file.name);\n  } catch (error) {\n    console.error(`[filesActions] Error getting link for user ${userId} file ${file.id}`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;IAwGsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/filesActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter from '@/lib/eventEmitter';\nimport { FileStatus, KnowledgeFile } from '@/lib/models/common.models';\nimport { deleteGcpStorageFile, getGcpStorageSignedUrl, getSignedUrlForUpload } from '../db/gcpClient';\nimport { deleteUserFile, editUserFile, getUserFiles, uploadUserFiles } from '../db/userClient';\nimport { getSessionUser } from './sessionActions';\n\nexport const uploadFileToGCP = async (userId: string, file: File, name: string): Promise<string | null> => {\n  try {\n    const formData = new FormData();\n    const fileName = `${userId}/${name}`;\n    const { url, fields } = await getSignedUrlForUpload(fileName, file.type, process.env.GCP_KB_BUCKET_NAME || '');\n\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value as any);\n    });\n\n    const response = await fetch(url, { method: 'POST', body: formData });\n\n    if (!response.ok) {\n      console.error(`Failed to upload file: ${response.status} ${response.statusText}`);\n    }\n\n    return `${process.env.GCP_KB_BUCKET_NAME || ''}/${fileName}`;\n  } catch (error) {\n    console.error(`[fileActions] Error uploading user ${userId} file \"${file.name}\":`, error);\n    return null;\n  }\n};\n\nexport async function getFiles(): Promise<KnowledgeFile[]> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    return getUserFiles(userId || '');\n  } catch (error) {\n    console.error(`[filesActions] Error fetching user ${userId} files`, error);\n\n    return [];\n  }\n}\n\nexport async function uploadFile({ id, content }: { id: string; content: File }): Promise<string | null> {\n  let user_id: string | undefined;\n  try {\n    user_id = (await getSessionUser()) || '';\n\n    if (!user_id) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const fileId = uuidv4();\n    const location = await uploadFileToGCP(user_id || '', content, fileId);\n    const uploadedFile = await uploadUserFiles({\n      id: fileId,\n      name: content.name,\n      status: FileStatus.processing,\n      location,\n      user_id,\n    });\n\n    eventEmitter.emit(`message:${user_id}`, { user_id, event: 'fileUploaded', data: uploadedFile });\n    return id;\n  } catch (error) {\n    console.error(`[filesActions] Error updating account data for user ${user_id}`, error);\n\n    return null;\n  }\n}\n\nexport async function revalidateFilesTag() {\n  revalidateTag('files');\n}\n\nexport async function editFile(\n  id: string,\n  data: Partial<KnowledgeFile>,\n  user_id?: string\n): Promise<KnowledgeFile | null> {\n  let userId;\n  try {\n    userId = user_id || (await getSessionUser());\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const editedFile = await editUserFile(userId, id, data);\n    revalidateTag('files');\n\n    return editedFile;\n  } catch (error) {\n    console.error(`[filesActions] Error updating user ${userId} file ${id}`, error);\n    return null;\n  }\n}\n\nexport async function deleteFile(file: KnowledgeFile): Promise<void> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      return console.error('[filesActions] User not authenticated');\n    }\n\n    if (!file.location) {\n      return console.error('[filesActions] File name or bucket is not set!');\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    await deleteGcpStorageFile(process.env.GCP_KB_BUCKET_NAME || '', filename);\n    await deleteUserFile(userId, file.id);\n    revalidateTag('files');\n  } catch (error) {\n    console.error(`[filesActions] Error deleting user ${userId} file ${file.id}`, error);\n  }\n}\n\nexport async function getFileLink(file: KnowledgeFile): Promise<string | null> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    if (!file.location || !process.env.GCP_KB_BUCKET_NAME) {\n      console.error('[filesActions] File name or bucket is not set!');\n      return null;\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    return getGcpStorageSignedUrl(filename, process.env.GCP_KB_BUCKET_NAME || '', file.name);\n  } catch (error) {\n    console.error(`[filesActions] Error getting link for user ${userId} file ${file.id}`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgFsB,WAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/filesActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter from '@/lib/eventEmitter';\nimport { FileStatus, KnowledgeFile } from '@/lib/models/common.models';\nimport { deleteGcpStorageFile, getGcpStorageSignedUrl, getSignedUrlForUpload } from '../db/gcpClient';\nimport { deleteUserFile, editUserFile, getUserFiles, uploadUserFiles } from '../db/userClient';\nimport { getSessionUser } from './sessionActions';\n\nexport const uploadFileToGCP = async (userId: string, file: File, name: string): Promise<string | null> => {\n  try {\n    const formData = new FormData();\n    const fileName = `${userId}/${name}`;\n    const { url, fields } = await getSignedUrlForUpload(fileName, file.type, process.env.GCP_KB_BUCKET_NAME || '');\n\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value as any);\n    });\n\n    const response = await fetch(url, { method: 'POST', body: formData });\n\n    if (!response.ok) {\n      console.error(`Failed to upload file: ${response.status} ${response.statusText}`);\n    }\n\n    return `${process.env.GCP_KB_BUCKET_NAME || ''}/${fileName}`;\n  } catch (error) {\n    console.error(`[fileActions] Error uploading user ${userId} file \"${file.name}\":`, error);\n    return null;\n  }\n};\n\nexport async function getFiles(): Promise<KnowledgeFile[]> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    return getUserFiles(userId || '');\n  } catch (error) {\n    console.error(`[filesActions] Error fetching user ${userId} files`, error);\n\n    return [];\n  }\n}\n\nexport async function uploadFile({ id, content }: { id: string; content: File }): Promise<string | null> {\n  let user_id: string | undefined;\n  try {\n    user_id = (await getSessionUser()) || '';\n\n    if (!user_id) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const fileId = uuidv4();\n    const location = await uploadFileToGCP(user_id || '', content, fileId);\n    const uploadedFile = await uploadUserFiles({\n      id: fileId,\n      name: content.name,\n      status: FileStatus.processing,\n      location,\n      user_id,\n    });\n\n    eventEmitter.emit(`message:${user_id}`, { user_id, event: 'fileUploaded', data: uploadedFile });\n    return id;\n  } catch (error) {\n    console.error(`[filesActions] Error updating account data for user ${user_id}`, error);\n\n    return null;\n  }\n}\n\nexport async function revalidateFilesTag() {\n  revalidateTag('files');\n}\n\nexport async function editFile(\n  id: string,\n  data: Partial<KnowledgeFile>,\n  user_id?: string\n): Promise<KnowledgeFile | null> {\n  let userId;\n  try {\n    userId = user_id || (await getSessionUser());\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const editedFile = await editUserFile(userId, id, data);\n    revalidateTag('files');\n\n    return editedFile;\n  } catch (error) {\n    console.error(`[filesActions] Error updating user ${userId} file ${id}`, error);\n    return null;\n  }\n}\n\nexport async function deleteFile(file: KnowledgeFile): Promise<void> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      return console.error('[filesActions] User not authenticated');\n    }\n\n    if (!file.location) {\n      return console.error('[filesActions] File name or bucket is not set!');\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    await deleteGcpStorageFile(process.env.GCP_KB_BUCKET_NAME || '', filename);\n    await deleteUserFile(userId, file.id);\n    revalidateTag('files');\n  } catch (error) {\n    console.error(`[filesActions] Error deleting user ${userId} file ${file.id}`, error);\n  }\n}\n\nexport async function getFileLink(file: KnowledgeFile): Promise<string | null> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    if (!file.location || !process.env.GCP_KB_BUCKET_NAME) {\n      console.error('[filesActions] File name or bucket is not set!');\n      return null;\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    return getGcpStorageSignedUrl(filename, process.env.GCP_KB_BUCKET_NAME || '', file.name);\n  } catch (error) {\n    console.error(`[filesActions] Error getting link for user ${userId} file ${file.id}`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;IA+HsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/shared/Dropdown.tsx"],"sourcesContent":["'use client';\n\nimport { Fragment, ReactNode, useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';\nimport { useTranslations } from 'next-intl';\nimport { twMerge } from 'tailwind-merge';\n\nimport { Button } from './Button';\n\nexport interface BaseValue {\n  id: string | number;\n  title?: string | null;\n  name?: string | null;\n  custom?: boolean | null;\n}\n\nexport interface DropdownOption<T> {\n  id: string | number;\n  href?: string;\n  icon?: string;\n  labelKey?: string;\n  label?: string;\n  value: T;\n  className?: string;\n  handler?: (option: DropdownOption<T>) => void;\n}\n\ninterface DropdownProps<T> {\n  children?: ReactNode;\n  options: DropdownOption<T>[];\n  selectedOption?: T;\n  position?: any;\n  optionClassName?: string;\n  listClassName?: string;\n  buttonIcon?: string;\n  className?: string;\n  label?: string;\n  movableItems?: boolean;\n  onSelectedChange: (option: DropdownOption<T>) => void;\n  onItemMoved?: (up: boolean, option: DropdownOption<T>) => void;\n}\n\nexport const getOption = function <T extends BaseValue>(value: T, labelKey: string): DropdownOption<T> {\n  const label: string = (value[labelKey as keyof T] as string) || value.title || '';\n\n  return {\n    id: value.id,\n    label: value.custom ? label : label.replaceAll('_', ' '),\n    value,\n    icon: value.custom ? 'cbi-send' : '',\n  };\n};\n\nexport const getOptions = function <T extends BaseValue>(values: T[], labelKey: string): DropdownOption<T>[] {\n  return values.map((value: T) => getOption(value, labelKey));\n};\n\nexport default function Dropdown<T>({\n  children,\n  optionClassName,\n  listClassName,\n  position,\n  options,\n  buttonIcon = 'cbi-arrow-down group-data-[open]:rotate-180',\n  selectedOption,\n  className,\n  label,\n  movableItems,\n  onSelectedChange,\n  onItemMoved,\n}: DropdownProps<T>) {\n  const t = useTranslations();\n  const [selected, setSelected] = useState<DropdownOption<T> | null>(options[0] || null);\n\n  const handleSelectedChange = useCallback(\n    (option: DropdownOption<T>) => {\n      setSelected(option);\n      onSelectedChange(option);\n\n      if (option.handler) {\n        option.handler(option);\n      }\n    },\n    [onSelectedChange]\n  );\n\n  useEffect(() => {\n    const foundOption = options.find((option: DropdownOption<T>) => {\n      if (typeof option.value === 'string') {\n        return option.value === selectedOption;\n      }\n\n      return (\n        (option.value as BaseValue).id === (selectedOption as BaseValue)?.id ||\n        JSON.stringify(option.value) === JSON.stringify(selectedOption)\n      );\n    });\n\n    setSelected(foundOption || options[0] || null);\n  }, [selectedOption, options]);\n\n  return (\n    <Listbox value={selected} onChange={handleSelectedChange}>\n      <ListboxButton\n        disabled={!selected}\n        className={twMerge(\n          'leading-2 group flex items-center justify-between rounded-lg text-base font-medium text-light-gray',\n          'rounded-xl border border-storm-gray px-3 py-2.5',\n          selected && 'capitalize',\n          className\n        )}\n      >\n        {selected?.labelKey && t(selected.labelKey)}\n        {selected?.label}\n        {!selected && !options.length && t('General.dropdownEmptyPlaceholder')}\n        {!!options.length && (buttonIcon || selected?.icon) && <i className={buttonIcon || selected?.icon}></i>}\n      </ListboxButton>\n      <ListboxOptions\n        anchor={position || 'bottom'}\n        transition\n        className={twMerge(\n          'z-20 flex w-[var(--button-width)] origin-top flex-col gap-y-5 rounded-lg border border-light-gray bg-background p-3.5 transition duration-200 ease-out data-[closed]:scale-95 data-[closed]:opacity-0',\n          listClassName\n        )}\n      >\n        {label && <p className=\"text-sm text-storm-gray\">{label}</p>}\n        {children}\n        {options.map((option: DropdownOption<T>, index: number, { length }: DropdownOption<T>[]) => (\n          <ListboxOption key={`${option.id}` + index} value={option} as={Fragment}>\n            {({ selected }) => (\n              <div\n                key={option.id}\n                className={twMerge(\n                  'flex w-full cursor-pointer items-center text-base text-light-gray hover:text-main',\n                  optionClassName\n                )}\n              >\n                {option.href ? (\n                  <Link\n                    prefetch={false}\n                    href={option.href}\n                    className={twMerge('inline-flex w-full justify-between', option.className)}\n                  >\n                    <span className=\"inline-flex items-center gap-x-2\">\n                      {option.icon && <i className={option.icon}></i>}\n                      {option.label || (option.labelKey && t(option.labelKey))}\n                    </span>\n                    {selected && <i className=\"cbi-tick-circle text-xs text-saffron\"></i>}\n                  </Link>\n                ) : (\n                  <div className=\"inline-flex w-full justify-between\">\n                    <span className=\"inline-flex gap-x-1.5\">\n                      {option.icon && <i className={option.icon}></i>}\n                      {option.label || (option.labelKey && t(option.labelKey))}\n                    </span>\n                    <div className=\"flex gap-x-3\">\n                      {selected && <i className=\"cbi-tick-circle text-sm text-main\"></i>}\n                      {movableItems && (\n                        <div\n                          className=\"flex flex-col items-center justify-center gap-y-0 text-xl\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <Button\n                            title=\"Move item up\"\n                            disabled={index === 0}\n                            className=\"cbi-arrow-up-bold p-0 text-lg leading-3 text-main hover:text-dark-aquamarine disabled:opacity-30\"\n                            onClick={() => onItemMoved?.(true, option)}\n                          />\n\n                          <Button\n                            title=\"Move item down\"\n                            disabled={index === length - 1}\n                            className=\"cbi-arrow-down-bold p-0 text-lg leading-3 text-main hover:text-dark-aquamarine disabled:opacity-30\"\n                            onClick={() => onItemMoved?.(false, option)}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </ListboxOption>\n        ))}\n      </ListboxOptions>\n    </Listbox>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/shared/ModalButtons.tsx"],"sourcesContent":["'use client';\n\nimport { ReactNode, useCallback, useState } from 'react';\nimport { twMerge } from 'tailwind-merge';\n\nimport { Button } from './Button';\nimport { Modal, ModalProps } from './Modal';\n\nexport function DeleteWithConfirmationButton({\n  config,\n  iconClassName,\n  className,\n  children,\n  buttonText,\n}: {\n  config: Omit<ModalProps, 'isOpen' | 'closeModal'>;\n  iconClassName?: string;\n  className?: string;\n  children: ReactNode;\n  buttonText?: string;\n}) {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleConfirm = useCallback(async () => {\n    config?.confirm && (await config?.confirm());\n    setModalOpen(false);\n  }, [config.confirm]);\n\n  return (\n    <>\n      <Button className={twMerge('items-center justify-center', className)} onClick={() => setModalOpen(true)}>\n        <i className={iconClassName}></i>\n        {buttonText}\n      </Button>\n      {config && modalOpen && (\n        <Modal\n          {...config}\n          isOpen={modalOpen}\n          closeModal={() => setModalOpen(false)}\n          confirm={handleConfirm}\n          confirmButtonClass=\"bg-main hover:bg-white/[8%] hover:border-background-border/[16%] text-background\"\n        >\n          {children}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport function EditModalButton({\n  initialValue,\n  config,\n  className,\n  children,\n}: {\n  config: Omit<ModalProps, 'isOpen' | 'closeModal'>;\n  className?: string;\n  children: ReactNode;\n  initialValue: string;\n}) {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [value, setValue] = useState('');\n\n  const handleConfirm = useCallback(async () => {\n    config?.confirm && (await config?.confirm(value));\n    setModalOpen(false);\n  }, [config.confirm, value]);\n\n  return (\n    <>\n      <Button className={(twMerge('cbi-trash'), className)} onClick={() => setModalOpen(true)} />\n      {config && modalOpen && (\n        <Modal {...config} isOpen={modalOpen} closeModal={() => setModalOpen(false)} confirm={handleConfirm}>\n          {children}\n          <input\n            id=\"edit-value-input\"\n            required\n            defaultValue={initialValue || ''}\n            className={twMerge(\n              'focus:no-outline rounded-lg border border-light-gray bg-white/[18%] px-4 py-2 text-lg text-main placeholder:text-base focus:ring-0'\n            )}\n            onChange={(e) => setValue(e.target.value)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport function ModalButton({\n  config,\n  className,\n  children,\n  showButtons = false,\n}: {\n  config: Omit<ModalProps, 'isOpen' | 'closeModal'>;\n  className?: string;\n  children: ReactNode;\n  showButtons?: boolean;\n}) {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <>\n      <Button className={(twMerge('cbi-trash'), className)} onClick={() => setModalOpen(true)} />\n      {config && modalOpen && (\n        <Modal\n          {...config}\n          showButtons={showButtons}\n          isOpen={modalOpen}\n          closeModal={() => setModalOpen(false)}\n          confirm={() => setModalOpen(false)}\n        >\n          {children}\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQO,SAAS,6BAA6B,EAC3C,MAAM,EACN,aAAa,EACb,SAAS,EACT,QAAQ,EACR,UAAU,EAOX;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAChC,QAAQ,WAAY,MAAM,QAAQ;QAClC,aAAa;IACf,GAAG;QAAC,OAAO,OAAO;KAAC;IAEnB,qBACE;;0BACE,8OAAC,wHAAA,CAAA,SAAM;gBAAC,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,+BAA+B;gBAAY,SAAS,IAAM,aAAa;;kCAChG,8OAAC;wBAAE,WAAW;;;;;;oBACb;;;;;;;YAEF,UAAU,2BACT,8OAAC,uHAAA,CAAA,QAAK;gBACH,GAAG,MAAM;gBACV,QAAQ;gBACR,YAAY,IAAM,aAAa;gBAC/B,SAAS;gBACT,oBAAmB;0BAElB;;;;;;;;AAKX;AAEO,SAAS,gBAAgB,EAC9B,YAAY,EACZ,MAAM,EACN,SAAS,EACT,QAAQ,EAMT;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAChC,QAAQ,WAAY,MAAM,QAAQ,QAAQ;QAC1C,aAAa;IACf,GAAG;QAAC,OAAO,OAAO;QAAE;KAAM;IAE1B,qBACE;;0BACE,8OAAC,wHAAA,CAAA,SAAM;gBAAC,WAAW,CAAC,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,cAAc,SAAS;gBAAG,SAAS,IAAM,aAAa;;;;;;YACjF,UAAU,2BACT,8OAAC,uHAAA,CAAA,QAAK;gBAAE,GAAG,MAAM;gBAAE,QAAQ;gBAAW,YAAY,IAAM,aAAa;gBAAQ,SAAS;;oBACnF;kCACD,8OAAC;wBACC,IAAG;wBACH,QAAQ;wBACR,cAAc,gBAAgB;wBAC9B,WAAW,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EACf;wBAEF,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;AAMpD;AAEO,SAAS,YAAY,EAC1B,MAAM,EACN,SAAS,EACT,QAAQ,EACR,cAAc,KAAK,EAMpB;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,qBACE;;0BACE,8OAAC,wHAAA,CAAA,SAAM;gBAAC,WAAW,CAAC,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,cAAc,SAAS;gBAAG,SAAS,IAAM,aAAa;;;;;;YACjF,UAAU,2BACT,8OAAC,uHAAA,CAAA,QAAK;gBACH,GAAG,MAAM;gBACV,aAAa;gBACb,QAAQ;gBACR,YAAY,IAAM,aAAa;gBAC/B,SAAS,IAAM,aAAa;0BAE3B;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/app/%28main%29/content/_components/FilesList.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { twMerge } from 'tailwind-merge';\n\nimport { useSSE } from '@/hooks/useSSE';\nimport { FileStatus, FileType, KnowledgeFile } from '@/lib/models/common.models';\nimport { getDateDay, getDateWeekDay } from '@/lib/utils/date.utils';\nimport { deleteFile, editFile, getFileLink } from '@/server/actions/filesActions';\nimport { Button } from '@/shared/Button';\nimport Dropdown from '@/shared/Dropdown';\nimport { Spinner } from '@/shared/Loaders';\nimport { DeleteWithConfirmationButton, EditModalButton } from '@/shared/ModalButtons';\nimport Tooltip from '@/shared/Tooltip';\n\nconst modalsConfig = {\n  delete: {\n    titleKey: 'KnowledgeBase.modals.delete.titleKey',\n    buttonIcon: 'cbi-trash text-xl',\n    buttonTitleKey: `KnowledgeBase.modals.delete.buttonTitleKey`,\n    variant: 'red',\n    contentKey: `KnowledgeBase.modals.delete.contentKey`,\n  },\n  edit: {\n    titleKey: 'KnowledgeBase.modals.edit.titleKey',\n    buttonIcon: 'cbi-edit-2 text-xl',\n    buttonTitleKey: `KnowledgeBase.modals.edit.buttonTitleKey`,\n    variant: 'white',\n    contentKey: `KnowledgeBase.modals.edit.contentKey`,\n  },\n};\n\nconst fileTypeOptions = [\n  { id: 0, value: FileType.knowledge, labelKey: 'KnowledgeBase.fileTypesOptions.0' },\n  { id: 1, value: FileType.reference, labelKey: 'KnowledgeBase.fileTypesOptions.1' },\n];\n\nexport default function FilesList({ files }: { files: KnowledgeFile[] }) {\n  const t = useTranslations();\n  const fileTypesTooltips = Object.values(t.raw('KnowledgeBase.fileTypesTooltips'));\n  const [items, setItems] = useState<KnowledgeFile[]>(files);\n\n  useSSE({\n    events: {\n      fileUpdated: (updatedItem) =>\n        updatedItem && setItems((prev) => prev.map((item) => (item?.id === updatedItem?.id ? updatedItem : item))),\n      fileUploaded: (newItem) => newItem && setItems((prev) => [newItem, ...prev]),\n    },\n  });\n\n  useEffect(() => {\n    setItems(files);\n  }, [files]);\n\n  return (\n    <ul className=\"flex flex-grow flex-col\">\n      {items.map((file: KnowledgeFile, index: number, { length }: KnowledgeFile[]) => (\n        <li\n          key={file.name + index}\n          className={twMerge('flex w-full items-center border-storm-gray py-1', index === length - 1 ? '' : 'border-b')}\n        >\n          <div\n            className={twMerge(\n              'flex w-full items-center justify-between gap-x-5 rounded-xl px-4 py-2.5 hover:bg-white-opacity',\n              file.status === FileStatus.processing && 'border border-dark-aquamarine',\n              file.status === FileStatus.error && 'border border-salmon'\n            )}\n          >\n            {file.status === FileStatus.processing && (\n              <Spinner\n                icon=\"cbi-subtract\"\n                textClassName=\"text-dark-aquamarine text-xs xl:text-nowrap\"\n                withText={true}\n                text={t('KnowledgeBase.processingText')}\n              />\n            )}\n            {file.status === FileStatus.error && (\n              <p className=\"inline-flex items-center justify-start gap-x-1.5 text-xs text-salmon\">\n                <span className=\"cbi-close-circle text-lg text-salmon\" /> {t('KnowledgeBase.errorText')}\n              </p>\n            )}\n\n            <div\n              className={twMerge(\n                'line-clamp-3 shrink flex-grow basis-1/2 break-words text-sm',\n                file.checked ? 'text-main' : 'text-light-gray'\n              )}\n              title={file.name}\n            >\n              {file.name}\n            </div>\n\n            {file.status === FileStatus.complete && (\n              <div\n                className={twMerge(\n                  'flex w-[15%] min-w-60 shrink-0 flex-grow items-start gap-x-1 text-sm',\n                  file.checked ? 'text-main' : 'text-light-gray'\n                )}\n              >\n                <Dropdown\n                  selectedOption={file.fileType || FileType.knowledge}\n                  className=\"w-full text-nowrap py-1.5 text-light-gray\"\n                  options={fileTypeOptions}\n                  onSelectedChange={async ({ value }) => await editFile(file.id, { fileType: value })}\n                ></Dropdown>\n                <Tooltip\n                  iconClass=\"cbi-message-question text-light-gray hover:text-dark-aquamarine\"\n                  tooltipClassName=\"max-w-30\"\n                  tooltipLabelClassName=\"flex-col inline-flex gap-y-3 p-3 \"\n                >\n                  {fileTypesTooltips.map(({ title, description }: any, id: number) => (\n                    <div key={`tooltip-option-${id}`}>\n                      <h3 className=\"text-xs font-semibold text-background\">{title}</h3>\n                      <p className=\"text-xs font-light text-background\">{description}</p>\n                    </div>\n                  ))}\n                </Tooltip>\n              </div>\n            )}\n\n            <div className=\"flex shrink-0 items-center gap-x-5\">\n              <span className=\"min-w-28 text-right text-xs text-light-gray\">\n                {getDateWeekDay(file.uploaded_at)}, {getDateDay(file.uploaded_at)}\n              </span>\n\n              <div className=\"flex min-w-24 items-center justify-end gap-x-5\">\n                {file.status === FileStatus.complete && (\n                  <>\n                    <Button\n                      className=\"cbi-document-download p-0 text-storm-gray hover:text-main\"\n                      onClick={async () => {\n                        const link = await getFileLink(file);\n                        if (link) window.location.href = link;\n                      }}\n                    />\n                    <EditModalButton\n                      className=\"cbi-edit-2 p-0 text-storm-gray hover:text-main\"\n                      config={{\n                        ...modalsConfig.edit,\n                        confirm: async (value: string) => await editFile(file.id, { name: value || file.name }),\n                      }}\n                      initialValue={file.name}\n                    >\n                      <p className=\"text-main\">{t('KnowledgeBase.modals.edit.contentKey', { fileName: file.name })}</p>\n                    </EditModalButton>\n                  </>\n                )}\n                {file.status !== FileStatus.processing && (\n                  <DeleteWithConfirmationButton\n                    className={twMerge(\n                      'cbi-trash p-0 text-storm-gray hover:text-main',\n                      file.status === FileStatus.error && 'text-salmon'\n                    )}\n                    config={{ ...modalsConfig.delete, confirm: async () => await deleteFile(file) }}\n                  >\n                    <p className=\"text-main\">{t('KnowledgeBase.modals.delete.contentKey', { fileName: file.name })}</p>\n                  </DeleteWithConfirmationButton>\n                )}\n              </div>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 743, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/lib/utils/array.utils.ts"],"sourcesContent":["export function filterArray<T extends { id: any }>(values: T[], targteId: any): T[] {\n  return values.filter(({ id }) => id !== targteId);\n}\n\nexport function upsertArrayItem<T extends { id: any }>(values: T[], newValue: T): T[] {\n  const existingItem = values.map(({ id }) => id).includes(newValue.id);\n\n  return existingItem ? values.map((value) => (value.id === newValue.id ? newValue : value)) : [...values, newValue];\n}\n\nexport function getArraysInterseptions<T extends { id: any }>(values1: T[], values2: T[]): T[] {\n  return values1.filter((value1) => values2.some((value2) => value2.id === value1.id));\n}\n\nexport function getArraysDiff<T extends { id: any }>(values1: T[], values2: T[]): T[] {\n  return values1.filter((value1) => !values2.some((value2) => value2.id === value1.id));\n}\n\nexport function getUniqueArray<T extends { id: any }>(values: T[]): T[] {\n  const seen = new Set<string | number>();\n\n  return values.filter((value: T) => {\n    if (seen.has(value.id)) return false;\n\n    seen.add(value.id);\n    return true;\n  });\n}\n"],"names":[],"mappings":";;;;;;;AAAO,SAAS,YAAmC,MAAW,EAAE,QAAa;IAC3E,OAAO,OAAO,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,GAAK,OAAO;AAC1C;AAEO,SAAS,gBAAuC,MAAW,EAAE,QAAW;IAC7E,MAAM,eAAe,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAK,IAAI,QAAQ,CAAC,SAAS,EAAE;IAEpE,OAAO,eAAe,OAAO,GAAG,CAAC,CAAC,QAAW,MAAM,EAAE,KAAK,SAAS,EAAE,GAAG,WAAW,SAAU;WAAI;QAAQ;KAAS;AACpH;AAEO,SAAS,uBAA8C,OAAY,EAAE,OAAY;IACtF,OAAO,QAAQ,MAAM,CAAC,CAAC,SAAW,QAAQ,IAAI,CAAC,CAAC,SAAW,OAAO,EAAE,KAAK,OAAO,EAAE;AACpF;AAEO,SAAS,cAAqC,OAAY,EAAE,OAAY;IAC7E,OAAO,QAAQ,MAAM,CAAC,CAAC,SAAW,CAAC,QAAQ,IAAI,CAAC,CAAC,SAAW,OAAO,EAAE,KAAK,OAAO,EAAE;AACrF;AAEO,SAAS,eAAsC,MAAW;IAC/D,MAAM,OAAO,IAAI;IAEjB,OAAO,OAAO,MAAM,CAAC,CAAC;QACpB,IAAI,KAAK,GAAG,CAAC,MAAM,EAAE,GAAG,OAAO;QAE/B,KAAK,GAAG,CAAC,MAAM,EAAE;QACjB,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/lib/utils/data.utils.ts"],"sourcesContent":["export const deepEqual = (obj1: any, obj2: any): boolean => {\n  if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 === null || obj2 === null) {\n    return obj1 === obj2;\n  }\n\n  const keys1 = Object.keys(obj1).sort();\n  const keys2 = Object.keys(obj2).sort();\n\n  if (keys1.length !== keys2.length) return false;\n\n  return keys1.every((key) => deepEqual(obj1[key], obj2[key]));\n};\n\nexport const mapFiles = (files: File[], status: string, message?: string) => {\n  return files.map((file: File, index: number) => ({\n    content: file,\n    id: `${Date.now()}-${file.name}-${index}`,\n    name: file.name,\n    status,\n    message,\n  }));\n};\n\nexport const toBoolean = (value: string | boolean | undefined | null): boolean => {\n  if (typeof value === 'boolean') return value;\n\n  return value ? value?.toLowerCase() === 'true' : false;\n};\n"],"names":[],"mappings":";;;;;AAAO,MAAM,YAAY,CAAC,MAAW;IACnC,IAAI,OAAO,SAAS,YAAY,OAAO,SAAS,YAAY,SAAS,QAAQ,SAAS,MAAM;QAC1F,OAAO,SAAS;IAClB;IAEA,MAAM,QAAQ,OAAO,IAAI,CAAC,MAAM,IAAI;IACpC,MAAM,QAAQ,OAAO,IAAI,CAAC,MAAM,IAAI;IAEpC,IAAI,MAAM,MAAM,KAAK,MAAM,MAAM,EAAE,OAAO;IAE1C,OAAO,MAAM,KAAK,CAAC,CAAC,MAAQ,UAAU,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI;AAC5D;AAEO,MAAM,WAAW,CAAC,OAAe,QAAgB;IACtD,OAAO,MAAM,GAAG,CAAC,CAAC,MAAY,QAAkB,CAAC;YAC/C,SAAS;YACT,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO;YACzC,MAAM,KAAK,IAAI;YACf;YACA;QACF,CAAC;AACH;AAEO,MAAM,YAAY,CAAC;IACxB,IAAI,OAAO,UAAU,WAAW,OAAO;IAEvC,OAAO,QAAQ,OAAO,kBAAkB,SAAS;AACnD","debugId":null}},
    {"offset": {"line": 813, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/filesActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter from '@/lib/eventEmitter';\nimport { FileStatus, KnowledgeFile } from '@/lib/models/common.models';\nimport { deleteGcpStorageFile, getGcpStorageSignedUrl, getSignedUrlForUpload } from '../db/gcpClient';\nimport { deleteUserFile, editUserFile, getUserFiles, uploadUserFiles } from '../db/userClient';\nimport { getSessionUser } from './sessionActions';\n\nexport const uploadFileToGCP = async (userId: string, file: File, name: string): Promise<string | null> => {\n  try {\n    const formData = new FormData();\n    const fileName = `${userId}/${name}`;\n    const { url, fields } = await getSignedUrlForUpload(fileName, file.type, process.env.GCP_KB_BUCKET_NAME || '');\n\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value as any);\n    });\n\n    const response = await fetch(url, { method: 'POST', body: formData });\n\n    if (!response.ok) {\n      console.error(`Failed to upload file: ${response.status} ${response.statusText}`);\n    }\n\n    return `${process.env.GCP_KB_BUCKET_NAME || ''}/${fileName}`;\n  } catch (error) {\n    console.error(`[fileActions] Error uploading user ${userId} file \"${file.name}\":`, error);\n    return null;\n  }\n};\n\nexport async function getFiles(): Promise<KnowledgeFile[]> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    return getUserFiles(userId || '');\n  } catch (error) {\n    console.error(`[filesActions] Error fetching user ${userId} files`, error);\n\n    return [];\n  }\n}\n\nexport async function uploadFile({ id, content }: { id: string; content: File }): Promise<string | null> {\n  let user_id: string | undefined;\n  try {\n    user_id = (await getSessionUser()) || '';\n\n    if (!user_id) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const fileId = uuidv4();\n    const location = await uploadFileToGCP(user_id || '', content, fileId);\n    const uploadedFile = await uploadUserFiles({\n      id: fileId,\n      name: content.name,\n      status: FileStatus.processing,\n      location,\n      user_id,\n    });\n\n    eventEmitter.emit(`message:${user_id}`, { user_id, event: 'fileUploaded', data: uploadedFile });\n    return id;\n  } catch (error) {\n    console.error(`[filesActions] Error updating account data for user ${user_id}`, error);\n\n    return null;\n  }\n}\n\nexport async function revalidateFilesTag() {\n  revalidateTag('files');\n}\n\nexport async function editFile(\n  id: string,\n  data: Partial<KnowledgeFile>,\n  user_id?: string\n): Promise<KnowledgeFile | null> {\n  let userId;\n  try {\n    userId = user_id || (await getSessionUser());\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const editedFile = await editUserFile(userId, id, data);\n    revalidateTag('files');\n\n    return editedFile;\n  } catch (error) {\n    console.error(`[filesActions] Error updating user ${userId} file ${id}`, error);\n    return null;\n  }\n}\n\nexport async function deleteFile(file: KnowledgeFile): Promise<void> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      return console.error('[filesActions] User not authenticated');\n    }\n\n    if (!file.location) {\n      return console.error('[filesActions] File name or bucket is not set!');\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    await deleteGcpStorageFile(process.env.GCP_KB_BUCKET_NAME || '', filename);\n    await deleteUserFile(userId, file.id);\n    revalidateTag('files');\n  } catch (error) {\n    console.error(`[filesActions] Error deleting user ${userId} file ${file.id}`, error);\n  }\n}\n\nexport async function getFileLink(file: KnowledgeFile): Promise<string | null> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    if (!file.location || !process.env.GCP_KB_BUCKET_NAME) {\n      console.error('[filesActions] File name or bucket is not set!');\n      return null;\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    return getGcpStorageSignedUrl(filename, process.env.GCP_KB_BUCKET_NAME || '', file.name);\n  } catch (error) {\n    console.error(`[filesActions] Error getting link for user ${userId} file ${file.id}`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;IA4EsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 826, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/server/actions/filesActions.ts"],"sourcesContent":["'use server';\n\nimport { revalidateTag } from 'next/cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport eventEmitter from '@/lib/eventEmitter';\nimport { FileStatus, KnowledgeFile } from '@/lib/models/common.models';\nimport { deleteGcpStorageFile, getGcpStorageSignedUrl, getSignedUrlForUpload } from '../db/gcpClient';\nimport { deleteUserFile, editUserFile, getUserFiles, uploadUserFiles } from '../db/userClient';\nimport { getSessionUser } from './sessionActions';\n\nexport const uploadFileToGCP = async (userId: string, file: File, name: string): Promise<string | null> => {\n  try {\n    const formData = new FormData();\n    const fileName = `${userId}/${name}`;\n    const { url, fields } = await getSignedUrlForUpload(fileName, file.type, process.env.GCP_KB_BUCKET_NAME || '');\n\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value as any);\n    });\n\n    const response = await fetch(url, { method: 'POST', body: formData });\n\n    if (!response.ok) {\n      console.error(`Failed to upload file: ${response.status} ${response.statusText}`);\n    }\n\n    return `${process.env.GCP_KB_BUCKET_NAME || ''}/${fileName}`;\n  } catch (error) {\n    console.error(`[fileActions] Error uploading user ${userId} file \"${file.name}\":`, error);\n    return null;\n  }\n};\n\nexport async function getFiles(): Promise<KnowledgeFile[]> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    return getUserFiles(userId || '');\n  } catch (error) {\n    console.error(`[filesActions] Error fetching user ${userId} files`, error);\n\n    return [];\n  }\n}\n\nexport async function uploadFile({ id, content }: { id: string; content: File }): Promise<string | null> {\n  let user_id: string | undefined;\n  try {\n    user_id = (await getSessionUser()) || '';\n\n    if (!user_id) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const fileId = uuidv4();\n    const location = await uploadFileToGCP(user_id || '', content, fileId);\n    const uploadedFile = await uploadUserFiles({\n      id: fileId,\n      name: content.name,\n      status: FileStatus.processing,\n      location,\n      user_id,\n    });\n\n    eventEmitter.emit(`message:${user_id}`, { user_id, event: 'fileUploaded', data: uploadedFile });\n    return id;\n  } catch (error) {\n    console.error(`[filesActions] Error updating account data for user ${user_id}`, error);\n\n    return null;\n  }\n}\n\nexport async function revalidateFilesTag() {\n  revalidateTag('files');\n}\n\nexport async function editFile(\n  id: string,\n  data: Partial<KnowledgeFile>,\n  user_id?: string\n): Promise<KnowledgeFile | null> {\n  let userId;\n  try {\n    userId = user_id || (await getSessionUser());\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    const editedFile = await editUserFile(userId, id, data);\n    revalidateTag('files');\n\n    return editedFile;\n  } catch (error) {\n    console.error(`[filesActions] Error updating user ${userId} file ${id}`, error);\n    return null;\n  }\n}\n\nexport async function deleteFile(file: KnowledgeFile): Promise<void> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      return console.error('[filesActions] User not authenticated');\n    }\n\n    if (!file.location) {\n      return console.error('[filesActions] File name or bucket is not set!');\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    await deleteGcpStorageFile(process.env.GCP_KB_BUCKET_NAME || '', filename);\n    await deleteUserFile(userId, file.id);\n    revalidateTag('files');\n  } catch (error) {\n    console.error(`[filesActions] Error deleting user ${userId} file ${file.id}`, error);\n  }\n}\n\nexport async function getFileLink(file: KnowledgeFile): Promise<string | null> {\n  let userId;\n  try {\n    userId = await getSessionUser();\n\n    if (!userId) {\n      console.error('[filesActions] User not authenticated');\n      return null;\n    }\n\n    if (!file.location || !process.env.GCP_KB_BUCKET_NAME) {\n      console.error('[filesActions] File name or bucket is not set!');\n      return null;\n    }\n\n    const filename = file.location.replace(`${process.env.GCP_KB_BUCKET_NAME}/` || '', '');\n\n    return getGcpStorageSignedUrl(filename, process.env.GCP_KB_BUCKET_NAME || '', file.name);\n  } catch (error) {\n    console.error(`[filesActions] Error getting link for user ${userId} file ${file.id}`, error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;;;IA+CsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 839, "column": 0}, "map": {"version":3,"sources":["file:///Users/stefangajanovic/Desktop/coachbot/coachbot-codex/src/app/%28main%29/content/_components/FileUpload.tsx"],"sourcesContent":["'use client';\n\nimport { memo, ReactNode, useCallback, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { FileRejection, useDropzone } from 'react-dropzone';\nimport { twMerge } from 'tailwind-merge';\n\nimport { ACCEPTED_FILE_TYPES } from '@/lib/constants';\nimport { filterArray } from '@/lib/utils/array.utils';\nimport { mapFiles } from '@/lib/utils/data.utils';\nimport { revalidateFilesTag, uploadFile } from '@/server/actions/filesActions';\nimport { Button } from '@/shared/Button';\n\ntype NewFile = {\n  content: File;\n  id: string;\n  name: string;\n  status?: string;\n  message?: string;\n};\n\nenum Status {\n  uploading = 'uploading',\n  error = 'error',\n}\n\nexport const DropZonePreview = memo(function MessageItem({\n  open,\n  t,\n  onlyText,\n}: {\n  open: () => void;\n  t: any;\n  onlyText: boolean;\n}) {\n  return (\n    <div\n      className={twMerge(\n        'absolute inset-0 z-10 mx-auto flex flex-grow flex-col items-center justify-center rounded-xl'\n      )}\n    >\n      <div\n        className={twMerge(\n          'flex flex-col items-center justify-center gap-y-3 rounded-xl px-9 py-3',\n          onlyText ? '' : 'border border-dashed border-storm-gray'\n        )}\n      >\n        <span className=\"cbi-document-upload text-6xl text-main\"></span>\n        <div className=\"flex flex-col items-center justify-center\">\n          <p className=\"text-lg font-bold text-main\">{t('KnowledgeBase.dropzoneLabel')}</p>\n          <p className=\"text-xs uppercase text-light-gray\">\n            {[...new Set(Object.values(ACCEPTED_FILE_TYPES).flat())].join(', ')}\n          </p>\n        </div>\n\n        {!onlyText && (\n          <>\n            <p className=\"flex w-full items-center gap-2 text-main before:flex-grow before:border-b before:border-storm-gray before:content-[''] after:flex-grow after:border-b after:border-storm-gray after:content-['']\">\n              {t('KnowledgeBase.dropzoneDivider')}\n            </p>\n            <Button variant=\"solid\" color=\"dark\" onClick={open} className=\"hover:bg-main hover:text-background\">\n              {t('KnowledgeBase.browseButton')}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n});\n\nexport default function FileUpload({\n  initialView,\n  children,\n  isUploadAvailable,\n}: {\n  initialView: boolean;\n  children: ReactNode;\n  isUploadAvailable?: boolean;\n}) {\n  const t = useTranslations();\n  const [files, setFiles] = useState<NewFile[]>([]);\n\n  const handleFileUpload = useCallback(async (file: NewFile) => {\n    const uploadedFileId = await uploadFile(file);\n\n    setFiles((prev: NewFile[]) =>\n      uploadedFileId\n        ? filterArray(prev, uploadedFileId)\n        : prev.map((f: NewFile) => (f.id === file.id ? { ...file, status: Status.error } : f))\n    );\n  }, []);\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[], rejectedFiled: FileRejection[]) => {\n      if (!isUploadAvailable) {\n        return alert('This fuctional is not available yet.');\n      }\n\n      const newFiles: NewFile[] = mapFiles(acceptedFiles, Status.uploading);\n      const unsuportedFiles = mapFiles(\n        rejectedFiled.map(({ file }) => file),\n        'error',\n        'KnowledgeBase.errors.unsupportedFormat'\n      );\n\n      setFiles((prevFiles: NewFile[]) => [...prevFiles, ...newFiles, ...unsuportedFiles]);\n\n      newFiles.forEach(handleFileUpload);\n      await revalidateFilesTag();\n    },\n    [isUploadAvailable]\n  );\n\n  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n    onDrop,\n    accept: ACCEPTED_FILE_TYPES,\n    multiple: true,\n    noClick: true,\n    noKeyboard: true,\n  });\n\n  const handleOpen = useCallback(() => {\n    if (!isUploadAvailable) return alert('This functional is not available yet.');\n\n    open();\n  }, [isUploadAvailable]);\n\n  return (\n    <>\n      <div\n        className={twMerge(\n          'relative z-0 flex min-h-64 w-full shrink-0 flex-grow flex-col gap-y-2 rounded-xl bg-graphic/[14%] p-3',\n          isDragActive && 'z-20 bg-dark-aquamarine/[10%]'\n        )}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />\n        {(isDragActive || initialView) && <DropZonePreview t={t} open={handleOpen} onlyText={isDragActive} />}\n\n        {children}\n\n        <div className=\"sticky bottom-0 z-[11] ms-auto flex w-fit max-w-[40%] flex-col items-end justify-end gap-y-3\">\n          {!!files.length && (\n            <ul className=\"absolute bottom-12 flex h-[60vh] w-max max-w-96 flex-grow flex-col-reverse gap-y-1 overflow-y-auto px-1 will-change-scroll\">\n              {files.map((file: NewFile, index: number) => (\n                <li\n                  key={`${file.name}-${index}`}\n                  className=\"relative flex min-w-64 shrink-0 items-center gap-x-3 rounded-2xl bg-storm-gray px-3 py-2.5\"\n                >\n                  {file.status === Status.error && (\n                    <span\n                      className=\"cbi-close-circle absolute right-0 top-2 -translate-x-[22%] px-1 text-light-gray\"\n                      onClick={() => setFiles((prev) => filterArray(prev, file.id))}\n                    ></span>\n                  )}\n                  <div className=\"relative inline-flex items-center justify-center\">\n                    <span\n                      className={twMerge(\n                        \"size-12 rounded-[50%] p-1 after:inline-block after:size-full after:rounded-[50%] after:bg-storm-gray after:content-['']\",\n                        file.status === Status.uploading && 'animate-spin bg-yellow-spinner'\n                      )}\n                    />\n                    <i\n                      className={twMerge(\n                        'cbi-document-upload absolute text-main',\n                        file.status === Status.error && '!text-2xl text-salmon'\n                      )}\n                    />\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <p className=\"line-clamp-3 break-words pe-3 text-base font-medium text-main\">{file.name}</p>\n\n                    {file.message && t.has(file.message) && <p className=\"text-xs text-salmon\">{t(file.message)}</p>}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n\n          {!initialView && (\n            <Button\n              onClick={handleOpen}\n              variant=\"solid\"\n              color=\"dark\"\n              className=\"sticky ms-auto self-end hover:bg-main hover:text-background\"\n            >\n              <i className=\"cbi-paperclip\" />\n              {t('KnowledgeBase.addDocumentButton')}\n            </Button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}