generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

model Chat {
  id             String     @id @default(cuid())
  name           String
  userId         String
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  currentStage   String?
  lifeAreas      Json?
  sessionSummary Json?
  stageAnalysis  Json?
  User           User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Messages       Message[]  @relation("ChatMessages")
  Summary        Summary[]
  assistantId    String?    @db.Uuid
  Assistant      Assistant? @relation(fields: [assistantId], references: [id])

  @@index([lifeAreas], map: "idx_chat_life_areas_gin", type: Gin)
  @@index([sessionSummary], map: "idx_chat_summary_gin", type: Gin)
}

model Message {
  id              String   @id @default(cuid())
  content         String
  star            Boolean?
  role            String
  chatId          String
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  type            String?
  stage           String?
  originalContent String?
  stageAnalysis   String?
  Chat            Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ModelConfig {
  id                       Int                     @id(map: "model_configs_pkey") @default(autoincrement())
  model                    String                  @db.VarChar(50)
  temperature              Decimal                 @db.Decimal(3, 2)
  top_p                    Decimal                 @db.Decimal(3, 2)
  frequency_penalty        Decimal                 @db.Decimal(3, 2)
  presence_penalty         Decimal                 @db.Decimal(3, 2)
  created_at               DateTime?               @default(now()) @db.Timestamptz(6)
  assistantId              String?                 @db.Uuid
  templateId               String?                 @db.Uuid
  Assistant                Assistant?              @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  Template                 Template?               @relation(fields: [templateId], references: [id], onDelete: Cascade)
  AssistantConfiguration   AssistantConfiguration? @relation(fields: [assistantConfigurationId], references: [id])
  assistantConfigurationId String?                 @db.Uuid

  @@index([assistantId], map: "idx_model_configs_assistantId")
}

model ModerationRule {
  id                       String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String                  @db.VarChar(255)
  severity                 String?                 @db.VarChar(50)
  instructions             Json                    @default("{\"context\": \"\", \"triggers\": [], \"response_guidelines\": \"\"}")
  created_at               DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?               @default(now()) @db.Timestamptz(6)
  custom                   Boolean?                @default(false)
  assistantId              String?                 @db.Uuid
  Assistant                Assistant?              @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  ModerationTemplate       ModerationTemplate[]
  AssistantConfiguration   AssistantConfiguration? @relation(fields: [assistantConfigurationId], references: [id])
  assistantConfigurationId String?                 @db.Uuid

  @@index([assistantId], map: "idx_moderation_rule_assistantId")
}

model ModerationTemplate {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category          String          @db.VarChar(50)
  response_template String
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @default(now()) @db.Timestamptz(6)
  rule_id           String?         @db.Uuid
  ModerationRule    ModerationRule? @relation(fields: [rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Stage {
  id                       String                  @id(map: "Stages_pkey") @default(dbgenerated("nextval('stage_id_seq'::regclass)"))
  name                     String
  instructions             String?
  analyzer                 String?
  order                    Int
  assistantId              String?                 @db.Uuid
  templateId               String?                 @db.Uuid
  Assistant                Assistant?              @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  Template                 Template?               @relation(fields: [templateId], references: [id], onDelete: Cascade)
  AssistantConfiguration   AssistantConfiguration? @relation(fields: [assistantConfigurationId], references: [id])
  assistantConfigurationId String?                 @db.Uuid

  @@index([assistantId], map: "idx_stage_assistantId")
}

model Style {
  id                       Int                     @id(map: "tones_pkey") @default(autoincrement())
  tone                     String                  @db.VarChar(50)
  emoji_frequency          String                  @db.VarChar(20)
  language_complexity      String                  @db.VarChar(20)
  greeting_templates       Json
  response_patterns        Json
  closing_templates        Json
  created_at               DateTime?               @default(now()) @db.Timestamptz(6)
  title                    String?
  custom                   Boolean?                @default(false)
  assistantId              String?                 @db.Uuid
  Assistant                Assistant?              @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  AssistantConfiguration   AssistantConfiguration? @relation(fields: [assistantConfigurationId], references: [id])
  assistantConfigurationId String?                 @db.Uuid

  @@index([assistantId], map: "idx_style_assistantId")
}

model Summary {
  id                         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatId                     String
  stage                      String
  key_points                 Json
  insights                   Json
  emotional_state            String?
  progress_indicators        Json
  stage_specific             Json
  next_stage_recommendations Json
  created_at                 DateTime? @default(now()) @db.Timestamp(6)
  Chat                       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chatId], map: "idx_summary_chat_id")
}

model KnowledgeFile {
  id          String   @id @default(cuid())
  name        String
  location    String?
  status      String
  uploaded_at DateTime @default(now()) @db.Timestamptz(6)
  user_id     String
  fileType    String   @default("knowledge")
  User        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Subscription {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subscriptionId     String?
  customerId         String    @unique
  name               String?
  status             String
  canceledAt         DateTime?
  coaches            String?
  analytics          String?
  allowedIntegration Boolean?
  trialDays          String?
  userId             String    @unique
  trialUsed          Boolean?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_subscription_user_id")
}

model Preference {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  guidelines  String
  toneOfVoice String
  userId      String @unique
  vector_db   String @default("")
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_preference_user_id")
}

model User {
  id               String          @id
  name             String?
  email            String?
  emailVerified    Boolean?
  onboardingPassed Boolean?        @default(false)
  accessAllowed    Boolean?        @default(false)
  assistants       Assistant[]
  Chat             Chat[]
  KnowledgeFile    KnowledgeFile[]
  preferences      Preference?
  subscription     Subscription?
}

model PriceConfiguration {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assistantMeta   AssistantMeta @relation(fields: [assistantMetaId], references: [id], onDelete: Cascade)
  assistantMetaId String        @unique @db.Uuid
  amount          Float?
  monthly         Float
  yearly          Float?
  currency        String
  trialDays       Int?

  @@index([assistantMetaId], map: "idx_price_assistantMetaId")
}

model AssistantFeedback {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assistantMeta   AssistantMeta @relation(fields: [assistantMetaId], references: [id], onDelete: Cascade)
  assistantMetaId String        @unique @db.Uuid
  rating          Float
  title           String
  description     String
  userId          String?
  userName        String?

  @@index([assistantMetaId], map: "idx_feedback_assistantMetaId")
}

model AssistantMeta {
  id          String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  feedbacks   AssistantFeedback[]
  topics      String[]            @default([])
  visibility  Visibility          @default(public)
  accessLevel AccessLevel         @default(free)
  whatsapp    Boolean?
  price       PriceConfiguration?
  created_at  DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?           @updatedAt @db.Timestamptz(6)
  assistantId String              @unique @db.Uuid
  assistant   Assistant           @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@index([visibility], map: "idx_assistant_meta_visibility")
  @@index([assistantId], map: "idx_meta_assistantId")
}

model AssistantConfiguration {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  instructions       String?
  onboarding         String?
  onboardingAnalyzer String?
  tokensLimit        Int?
  usageType          AssistantUsageType?
  communicationModes CommunicationMode[] @default([text_to_text, speech_to_text])
  stages             Stage[]
  styles             Style[]
  modelConfigs       ModelConfig[]
  moderationRules    ModerationRule[]
  assistantId        String              @unique @db.Uuid
  assistant          Assistant           @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  templateId         String?             @db.Uuid
  template           Template?           @relation(fields: [templateId], references: [id])

  @@index([assistantId], map: "idx_configuration_assistantId")
}

model Assistant {
  id            String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  description   String
  created_at    DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?               @updatedAt @db.Timestamptz(6)
  userId        String
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mode          String                  @default("fullAccess")
  status        String                  @default("draft")
  configuration AssistantConfiguration?
  meta          AssistantMeta?

  templateId         String?             @db.Uuid
  template           Template?           @relation(fields: [templateId], references: [id])
  instructions       String?
  onboarding         String?
  onboardingAnalyzer String?
  modelConfigs       ModelConfig[]
  moderationRules    ModerationRule[]
  stages             Stage[]
  styles             Style[]
  tokensLimit        Int?
  usageType          AssistantUsageType?
  communicationModes CommunicationMode[] @default([text_to_text, speech_to_text])
  Chat               Chat[]

  @@index([userId], map: "idx_assistant_userId")
  @@index([status], map: "idx_assistant_status")
}

model Template {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String                   @unique
  instructions           String                   @default("AI Coach instructions")
  onboarding             String                   @default("New client onboarding instructions")
  onboardingAnalyzer     String                   @default("Onboarding evaluation/transition analysis instructions")
  assistants             Assistant[]
  modelConfigs           ModelConfig[]
  stages                 Stage[]
  AssistantConfiguration AssistantConfiguration[]
}

enum Visibility {
  public
  private
}

enum AccessLevel {
  free
  premium
}

enum AssistantUsageType {
  general
  unique
}

enum CommunicationMode {
  text_to_text
  speech_to_text
  voice_to_voice
  video_avatar
}
